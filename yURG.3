.TH yURG 3 2017-jan "linux" "heatherly custom tools manual"

.SH NAME
yURG \- simple, clean, incremental debugging and logging control

.SH IMAGERY
zelus-daimon (enforcer) -- daimon of zeal, dedication, and enforement

.SH SUMMARY
yURG is a shared library to provide standard, flexible, reliable, and detailed
traceability in programs.  its purpose is to take a complex and foundational
capabilty, make it more useful, reliable, and tested.

.SH SYNOPSIS
.nf
.B #include  <yURG.h> and link to either the -lyURG or -lyURG_debug

.R  ---command line--------------------------------
.BI "char     yURG_logger    (int    " "a_argc" ", char *" "a_arcv[]" ");"
.BI "char     yURG_urgs      (int    " "a_argc" ", char *" "a_arcv[]" ");"

.R  ---incremental---------------------------------
.BI "char     yURG_abbr      (cchar  " "a_abbr" ", cchar " "a_on" ");"
.BI "char     yURG_name      (cchar *" "a_name" ", cchar " "a_on" ");"

.R  ---support-------------------------------------
.BI "char*    yURG_version (void);"
.BI "char     yURG_lognum  (void);"
.BI "char    *yURG_orig    (void);"
.BI "char    *yURG_curr    (void);"

.SH QUICK UP-FRONT NOTE
urgents, as explained better below, are command line options to control
debugging.  the can only be used with the "debug" version of the program.
if they are requested from the normal production version, the will be
silently ignored.

my make file creates a debug version (suffexed with _debug) and strips
all debugging code to produce the production version.  for instance..
   khronos         production version of my cron daemon
   khronos_debug   matching debug version

as explained below, you can call the debug version with the @@urgents
option and it will explain all the urgents that can be used and the
matching debugging macros as the programmer can use.

.SH URGENTS
.SS DEFINITION
urgents are command line arguments to influence program logging, tracing,
and debugging and which run parallel to normal options.  normal command line
arguments change the programs functioning.  urgents change what is written
about the programs execution.

urgents are formatted consistently in order for them to stand out on the
command line.  urgents will always be prefixed with one or two "at" signs.

.SS short form (@).  
the short form of an urgent is two characters long.  the first character is
an "at" sign (@).  the second character is a single unique letter or number.
only the universal urgents, used in all programs, have short forms.
   @a         turns on debugging for command line arguments
   @u         turns on debugging for user interactions
   @g         turns on debugging for graphics and drawing

short form urgents can be strung together after a single @
   @agu       turns on the same options as requested above

short form urgents may also be turned off with a - after the @
   @-a        turns off debugging for command line arguments 
   @-agu      turns off the same options as requested above

.SS long form (@@).  
the long form of an urgent is generally five or more characters long.  it starts
with two "at" signs (@@).  these two are followed by three or more lower case
letters indicating a unique urgent.  all urgents have long forms.
   @@args     turns on debugging for command line arguments
   @@user     turns on debugging for user interactions
   @@graf     turns on debugging for graphics and drawing

long form urgents may be turned off with a prepended "no"
   @@noargs   turns off debugging for command line arguments 

.SS extra output form.  
long form urgents MAY have an option of a second, more verbose level of output
in order to better adjust debugging volume.  if this option is available,
the urgent is simply requested with upper case letters.
   @@ARGS     turns on full debugging for command line arguments
   @@USER     turns on full for user interactions
   @@GRAF     turns on full for graphics and drawing

same as long form urgents, they may be turned off with a "NO"
   @@NOARGS   turns off extra debugging for command line arguments 

.SS combination form.
there are several combination urgents that can help with quickly getting
output when more is required, such as early runs when little is known.
   @@quiet    turns off all debugging
   @@full     turns on all universal "a-z" debugging
   @@mas      turns on all universal "A-Z" extra debugging
   @@kitchen  turns on all universal "a-z" plus some useful extras
   @@omni     turns everything on, everything

.SS output
the user also has control over where the log file is placed.
   @@stdout   runs all logging to stdout
   @@ylog     writes to /var/log/yLOG (ram disk)
   @@ylogh    writes to /var/log/yLOG.historical (normal disk)
   @@root     writes to / as an emergency outlet
   @@usb      writes to /mnt/usb1 mount point for boot debugging

see yLOG (3) for details on locations.

.SS help
there are also a couple of options to help with urgent use.  these act
like the --version style arguement which print something and exit.
   @@urgents    writes list of every urgent to stdout and exits
   @@universal  writes list of universal urgents to stdout and exits
   @@library    writes list of library urgents to stdout and exits
   @@program    writes list of program urgents to stdout and exits

.SH COMMAND LINE FUNCTIONS
yURG operates at three levels, the first is to accept command line arguements
that indicate whether to log and what to log.

.SS yURG_logger
parses the command lines arguments just enough to find urgents that effect
whether to start logging and where the log file is placed (output above).
the function is given argc, and argv for parsing.

.SS yURG_urgs
after yURG_logger is run and logging initiated, the host program calls this
function to parse all the remaining urgents and prepare the debugging scope.
it is also given argc, and argv for parsing.

.SS normal initialization and use
below is the beginning of the main function in one of my programs.  preinit
is used only if something must be done to prepare for logging, such as in
the "init" system for starting up the computer.
      if (rc >= 0)  rc = PROG_preinit ();
      if (rc >= 0)  rc = yURG_logger  (a_argc, a_argv);
      if (rc >= 0)  rc = yURG_urgs    (a_argc, a_argv);
      if (rc >= 0)  rc = PROG_init    (a_argc, a_argv);
      if (rc >= 0)  rc = PROG_args    (a_argc, a_argv);
      if (rc >= 0)  rc = PROG_begin   ();
      if (rc >= 0)  rc = PROG_visual  ();

.SH INCREMENTAL FUNCTIONS
yURG operates at three levels, the second is to allow a program to adjust
its debugging focus and timing during operation.

.SS yURG_abbr,
turns debugging on or off for a short-form urgent using the one-letter assigned
to it -- YURG_ON or YURG_OFF are the second argument.

turning a lower case abbreviation ON turns on the basic level.  turning on
the upper case abbreviation turns on both normal and extra levels.

turning a lower case abbreviation OFF turns off all debugging for that urgent.
the upper case abbreviation turns off only the extra level.

.SS yURG_name,
turns debugging on or off for a the long-form, full name urgent. this works
exactly the same as the yLOG_abbr version, but can target any urgent.

.SH RUN-TIME MACROS
yURG operates at three levels, the third is to prefix yLOG functions
with yURG macros so that can be turned on and off by categories.

the actual definition of the macro is a simple if statement based on the
state of the urgent in yURG.  the macro is an "if" statement and only covers
a single statement -- NOT A BLOCK.

all macros are named exactly like the urgent long-form name.
   DEBUG_ARGS   yLOG_enter (__FUNCTION__);
   DEBUG_PROG   yLOG_value ("x_var"     , x_var);
   DEBUG_YLOGS  yLOG_info  ("x_str"     , x_str);

if you use @@args on the command line, every line preceeded with DEBUG_ARGS
will happen.

.SS warning
production and debug versions of the programs are created by
stripping lines with "DEBUG_" and "yLOG_" in them.   you can not use these
macros to encompass multiple lines as the stripping is very primative.  you
have been warned.

.SH SEE ALSO
 yLOG (3)        shared library for logging

.SH AUTHOR
heatherlyrobert ata gmail dotta com

.SH COLOPHON
this page is part of a documentation package meant to make our use of the
heatherly libraries easier and faster

